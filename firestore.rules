rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Super admin detection helper
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.superAdmin == true;
    }
    
    // Accounts
    match /accounts/{accountId} {
      function isMember() {
        return request.auth != null && request.auth.uid in resource.data.members;
      }
      function isAdmin() {
        return request.auth != null && request.auth.uid == resource.data.createdBy;
      }

      // Read for members; super admins can read metadata too
      allow read: if isMember() || isSuperAdmin();

      // Create by creator (becomes admin)
      allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy;

      // Update only by admin or super admin (but no direct deposit data here)
      allow update: if isAdmin() || isSuperAdmin();

      // Members management fields limitation (optional enforcement)
      // Could restrict keys if needed

      // Deposits subcollection
      match /deposits/{depositId} {
        allow read: if isMember(); // do NOT allow super admin to read deposit amounts

        allow create: if isMember() && request.auth.uid == request.resource.data.userId;

        // Only account admins can update limited status fields
        allow update: if isAdmin() &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'approvedBy', 'approvedAt']);
      }
    }

    // Invites
    match /invites/{token} {
      allow create: if request.auth != null; // created by any authenticated user (ideally account admin validated in backend)
      allow read: if request.auth != null && (
        resource.data.invitedEmail == request.auth.token.email || // invited user checking
        isSuperAdmin()
      );
      allow update: if request.auth != null; // accepting/canceling handled by client-side checks
    }
  }
}